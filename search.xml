<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>English</title>
      <link href="/2019/12/09/english/"/>
      <url>/2019/12/09/english/</url>
      
        <content type="html"><![CDATA[<h2 id="ShardingSphere"><a href="#ShardingSphere" class="headerlink" title="ShardingSphere"></a>ShardingSphere</h2><h2 id="Spring-In-Action"><a href="#Spring-In-Action" class="headerlink" title="Spring In Action"></a>Spring In Action</h2><h2 id="Supply-Chain-Management-Professionals"><a href="#Supply-Chain-Management-Professionals" class="headerlink" title="Supply Chain Management Professionals"></a>Supply Chain Management Professionals</h2><h2 id="DRAW"><a href="#DRAW" class="headerlink" title="DRAW"></a>DRAW</h2><h2 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h2><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac环境安装mysql</title>
      <link href="/2019/12/05/mac-install-mysql/"/>
      <url>/2019/12/05/mac-install-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="brew-安装mysql-5-7"><a href="#brew-安装mysql-5-7" class="headerlink" title="brew 安装mysql@5.7"></a>brew 安装<a href="mailto:mysql@5.7" target="_blank" rel="noopener">mysql@5.7</a></h2><p>使用brew安装mysql5.7版本</p><pre><code class="shell">brew install mysql@5.7</code></pre><p>安装完成之后会有以下内容显示</p><pre><code class="shell">==&gt; mysql@5.7We&#39;ve installed your MySQL database without a root password. To secure it run:    mysql_secure_installationMySQL is configured to only allow connections from localhost by defaultTo connect run:    mysql -urootmysql@5.7 is keg-only, which means it was not symlinked into /usr/local,because this is an alternate version of another formula.If you need to have mysql@5.7 first in your PATH run:  echo &#39;export PATH=&quot;/usr/local/opt/mysql@5.7/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrcFor compilers to find mysql@5.7 you may need to set:  export LDFLAGS=&quot;-L/usr/local/opt/mysql@5.7/lib&quot;  export CPPFLAGS=&quot;-I/usr/local/opt/mysql@5.7/include&quot;To have launchd start mysql@5.7 now and restart at login:  brew services start mysql@5.7Or, if you don&#39;t want/need a background service you can just run:  /usr/local/opt/mysql@5.7/bin/mysql.server start</code></pre><p>配置下环境变量</p><pre><code class="shell">  echo &#39;export PATH=&quot;/usr/local/opt/mysql@5.7/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc  export LDFLAGS=&quot;-L/usr/local/opt/mysql@5.7/lib&quot;  export CPPFLAGS=&quot;-I/usr/local/opt/mysql@5.7/include&quot;  source ~/.zshrc</code></pre><p>启用mysql有两种形式，一种通过brew启动，使用如下命令</p><pre><code class="shell"> brew services start mysql@5.7</code></pre><p>查看mysql进程</p><pre><code class="shell">lsof -i:3306</code></pre><p>另外一种直接使用mysql的mysql.server启用，命令如下：</p><pre><code class="shell">mysql.server start</code></pre><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>使用命令</p><pre><code class="shell">mysql_secure_installation</code></pre><p>如果使用上述命令让输入密码等问题的话，应该是你的mac之前安装过mysql数据库，所以此时你需要先把之前安装的mysql配置文件以及数据文件清除掉再重新安装mysql，具体参考<a href="https://stackoverflow.com/questions/4359131/brew-install-mysql-on-macos" target="_blank" rel="noopener">https://stackoverflow.com/questions/4359131/brew-install-mysql-on-macos</a></p><pre><code class="shell">brew remove mysql@5.7brew cleanup# 下面两步可能会操作失败，应该是mac系统版本不一致的问题launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plistrm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plistsudo rm -rf /usr/local/var/mysql# 重新安装brew install mysql@5.7</code></pre><p>执行<code>mysql_secure_installation</code>后的操作指示如下：</p><pre><code class="shell">Securing the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD PLUGIN can be used to test passwordsand improve security. It checks the strength of passwordand allows the users to set only those passwords which aresecure enough. Would you like to setup VALIDATE PASSWORD plugin?Press y|Y for Yes, any other key for No: y   // 这个选yes的话密码长度就必须要设置为8位以上，但我只想要6位的Please set the password for root here.New password:            　// 设置密码Re-enter new password:     // 再一次确认密码By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y    // 移除不用密码的那个账户Success.Normally, root should only be allowed to connect from&#39;localhost&#39;. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n　　//不接受root远程登录账号 ... skipping.By default, MySQL comes with a database named &#39;test&#39; thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y　　//删除text数据库 - Dropping test database...Success. - Removing privileges on test database...Success.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : ySuccess.All done!</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5d0c945e6fb9a07eba2c44e1" target="_blank" rel="noopener">mac使用brew安装mysql</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingSphere</title>
      <link href="/2019/11/28/shardingsphere/"/>
      <url>/2019/11/28/shardingsphere/</url>
      
        <content type="html"><![CDATA[<h1 id="ShardingSphere和PostgreSQL扫盲"><a href="#ShardingSphere和PostgreSQL扫盲" class="headerlink" title="ShardingSphere和PostgreSQL扫盲"></a>ShardingSphere和PostgreSQL扫盲</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g9erq57yvnj30u01167sc.jpg" alt="如何学习一门新技术"></p><p><strong>图片来自网络，侵删</strong></p><p>总结起来就是三部分：</p><ol><li>它是什么？有哪些功能点？同类的技术有哪些？对比同类技术来说，有哪些优点和缺点</li><li>快速入门<code>HelloWorld</code>上手</li><li>最佳实践&amp;&amp;源码分析</li><li>总结分享</li></ol><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><h3 id="github地址以及相关资料"><a href="#github地址以及相关资料" class="headerlink" title="github地址以及相关资料"></a>github地址以及相关资料</h3><p><a href="https://github.com/apache/incubator-shardingsphere​" target="_blank" rel="noopener">ShardingSphere</a></p><p><a href="https://github.com/apache/incubator-shardingsphere-example" target="_blank" rel="noopener">SharedingExample</a></p><p><a href="https://shardingsphere.apache.org/index_zh.html" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://www.infoq.cn/article/1QvyzW9W*YuF685kYBkq" target="_blank" rel="noopener">ShardingSphere在京东的落地</a></p><p><a href="https://segmentfault.com/a/1190000017272697" target="_blank" rel="noopener">数据库中间件</a></p><p><strong>推荐大家去看官方文档，下载官方sample进行尝试</strong></p><h2 id="分库分表概述"><a href="#分库分表概述" class="headerlink" title="分库分表概述"></a>分库分表概述</h2><p>以下内容来自官网：</p><blockquote><p>ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。</p></blockquote><p>ShardingSphere是关系型数据库中间件，有主要有三个功能：数据分片、分布式事务、数据库治理，目前我们主要使用了数据分片功能。</p><p><img src="https://shardingsphere.apache.org/document/current/img/shardingsphere-scope_cn.png" alt="ShardingSphere生态圈"></p><p>我们本次主要关注<strong>Sharding-JDBC</strong></p><blockquote><p>定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><ul><li>适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</li><li>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</li><li>支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</li></ul></blockquote><p><img src="https://shardingsphere.apache.org/document/current/img/sharding-jdbc-brief.png" alt="Sharding-JDBC"></p><table><thead><tr><th align="left"></th><th align="left"><em>Sharding-JDBC</em></th><th align="left"><em>Sharding-Proxy</em></th><th><em>Sharding-Sidecar</em></th></tr></thead><tbody><tr><td align="left">数据库</td><td align="left">任意</td><td align="left">MySQL</td><td>MySQL</td></tr><tr><td align="left">连接消耗数</td><td align="left">高</td><td align="left">低</td><td>高</td></tr><tr><td align="left">异构语言</td><td align="left">仅Java</td><td align="left">任意</td><td>任意</td></tr><tr><td align="left">性能</td><td align="left">损耗低</td><td align="left">损耗略高</td><td>损耗低</td></tr><tr><td align="left">无中心化</td><td align="left">是</td><td align="left">否</td><td>是</td></tr><tr><td align="left">静态入口</td><td align="left">无</td><td align="left">有</td><td>无</td></tr></tbody></table><p>总结：</p><p>数据库中间件很多，以下排名不分先后：</p><blockquote><p>Atlas、Kingshard、DBProxy、mysql router、MaxScale、58 Oceanus、ArkProxy、Ctrip DAL、Tsharding、Youtube vitess、网易DDB、Heisenberg、proxysql、Mango、DDAL、Datahekr、MTAtlas、MTDDL、Zebra、Cobar</p></blockquote><p><code>SharedingSphere</code>与以上的数据库中间件相比的话，开源社区比较活跃，没有修改mysql协议，功能支持相对完善，推荐使用</p><h2 id="概念以及功能"><a href="#概念以及功能" class="headerlink" title="概念以及功能"></a>概念以及功能</h2>]]></content>
      
      
      <categories>
          
          <category> ShardingSphere </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShardingSphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/2019/09/22/zookeeper/"/>
      <url>/2019/09/22/zookeeper/</url>
      
        <content type="html"><![CDATA[<h3 id="zookeeper配置文件详解"><a href="#zookeeper配置文件详解" class="headerlink" title="zookeeper配置文件详解"></a>zookeeper配置文件详解</h3><pre><code class="shell"># The number of milliseconds of each tick# tick 滴答，可以理解为心跳，为时间单位，initLimit和syncLimit均使用的次单位tickTime=2000# The number of ticks that the initial # synchronization phase can takeinitLimit=10# The number of ticks that can pass between # sending a request and getting an acknowledgement# fowller和leader之间的心跳是5tick,即leader和fowller发送消息，request和response的最长时间syncLimit=5# the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just # example sakes.# dataLogDir如果没提供的话使用的则是dataDir。zookeeper的持久化都存储在这两个目录里。# dataLogDir里是放到的顺序日志(WAL)。而dataDir里放的是内存数据结构的snapshot，便于快速恢复。# 为了达到性能最大化，一般建议把dataDir和dataLogDir分到不同的磁盘上，这样就可以充分利用磁盘顺序写的特性。dataLogDir=/usr/local/zookeeper/logsdataDir=/usr/local/zookeeper/data# the port at which the clients will connect 一个TCP端口clientPort=2181# the maximum number of client connections.# increase this if you need to handle more clients# 对于一个客户端的连接数限制，默认是60，这在大部分时候是足够了。但是在我们实际使用中发现，在测试环境经常超过这个数，经过调查发现有的团队将几十个应用全部部署到一台机器上，以方便测试，于是这个数字就超过了#maxClientCnxns=60## Be sure to read the maintenance section of the # administrator guide before turning on autopurge.#  一般，客户端连接zookeeper的时候，都会设置一个session timeout，如果超过这个时间client没有与zookeeper server有联系，则这个session会被设置为过期(如果这个session上有临时节点，则会被全部删除，这就是实现集群感知的基础，后面的文章会介绍这一点)。但是这个时间不是客户端可以无限制设置的，服务器可以设置这两个参数来限制客户端设置的范围## http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir# autopurge.snapRetainCount，autopurge.purgeInterval -- 客户端在与zookeeper交互过程中会产生非常多的日志，而且zookeeper也会将内存中的数据作为snapshot保存下来，这些数据是不会被自动删除的，这样磁盘中这样的数据就会越来越多。不过可以通过这两个参数来设置，让zookeeper自动删除数据。autopurge.purgeInterval就是设置多少小时清理一次。而autopurge.snapRetainCount是设置保留多少个snapshot，之前的则删除。# 不过如果你的集群是一个非常繁忙的集群，然后又碰上这个删除操作，可能会影响zookeeper集群的性能，所以一般会让这个过程在访问低谷的时候进行，但是遗憾的是zookeeper并没有设置在哪个时间点运行的设置，所以有的时候我们会禁用这个自动删除的功能，而在服务器上配置一个cron，然后在凌晨来干这件事#autopurge.snapRetainCount=3# Purge task interval in hours# Set to &quot;0&quot; to disable auto purge feature#autopurge.purgeInterval=1server.1= 192.168.1.131:2888:3888server.2= 192.168.1.132:2888:3888server.3= 192.168.1.133:2888:3888</code></pre>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux环境配置</title>
      <link href="/2019/08/18/linux-env/"/>
      <url>/2019/08/18/linux-env/</url>
      
        <content type="html"><![CDATA[<h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>下载jdk的rpm文件<code>jdk-8u221-linux-i586.rpm</code></p><pre><code class="shell">## 安装JDKrpm -ivh jdk-8u221-linux-i586.rpm## 修改文件夹名称cd /usr/java/mv jdk1.8.0_221-i586/ jdk1.8## 配置jdk的环境变量cd /usr/local/vi .bashrc## 修改环境变量配置export JAVA_HOME=/usr/java/jdk1.8export PATH=$PATH:$JAVA_HOME/bin## 刷新配置source .bashrc## 验证是否安装成功java -version</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka安装</title>
      <link href="/2019/08/18/kafka-install/"/>
      <url>/2019/08/18/kafka-install/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="MAC环境下安装kafka"><a href="#MAC环境下安装kafka" class="headerlink" title="MAC环境下安装kafka"></a>MAC环境下安装kafka</h2><p>MAC环境下我们使用Homebrew安装kafka</p><p>如果没有安装homebrew的话，请自行google安装。鉴于伟大的GFW的存在，homebrew安装完成了推荐设置下国内镜像源加速。</p><p>安装kafka前请先安装jdk环境，推荐jdk8以上的版本</p><h3 id="homebrew安装kafka命令"><a href="#homebrew安装kafka命令" class="headerlink" title="homebrew安装kafka命令"></a>homebrew安装kafka命令</h3><pre><code class="shell">brew install kafka</code></pre><p>done</p><p>kafka使用zookeeper保存kafka集群的的<code>metadata</code>和<code>consumer client details</code>，所以，安装kafka前需要安装zookeeper</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g63q55xm3fj31480fuwgy.jpg" alt="zk cluster"></p><h3 id="homebrew安装kafka后的文件地址"><a href="#homebrew安装kafka后的文件地址" class="headerlink" title="homebrew安装kafka后的文件地址"></a>homebrew安装kafka后的文件地址</h3><p>homebrew将安装的kafka和zookeeper放在<code>/usr/local/Cellar</code>目录下</p><p>本次安装的kafka的版本为<code>2.2.0</code>，zookeeper版本为<code>3.4.13</code></p><ul><li>homebrew将kafka和zookeeper的一些二进制文件和脚本文件的链接放在了<code>/usr/local/bin</code>目录下，比如说zk的<code>zkServer</code>、<code>zkCli</code>以及kafka的<code>kafka-server-start</code>、<code>kafka-server-stop</code>等脚本。</li><li>kafka和zk的配置文件分别在<code>/usr/local/etc/kafka</code>和<code>/usr/local/etc/zookeeper</code>中。</li><li>kafka和zk的的log目录分别在<code>/usr/local/var/log/kafka</code>和<code>/usr/local/var/log/zookeeper</code>中。</li></ul><h3 id="启动zk"><a href="#启动zk" class="headerlink" title="启动zk"></a>启动zk</h3><pre><code class="shell"># 启动zkzkServer start# 查看zk是否启动zkServer status# 或者查看zk的端口号lsof -i:2181lsof -i tcp:2181</code></pre><p>查看zk状态</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g63piufl85j30l204wjs3.jpg" alt="zkServer status"></p><p>查看端口号</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g63q6yo4pjj30w208igol.jpg" alt="port"></p><h3 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h3><pre><code class="shell"># 前台启动kafkakafka-server-start /usr/local/etc/kafka/server.properties# 查看是否启动，基于查看端口号lsof -i:9092# 后台启动kafkakafka-server-start -daemon /usr/local/etc/kafka/server.properties</code></pre><h3 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h3><pre><code class="shell">kafka-topics --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test# 显示主题列表kafka-topics --list --bootstrap-server localhost:9092# 删除主题kafka-topics --delete --bootstrap-server localhost:9092 --topic test</code></pre><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><pre><code class="shell"># 发送kafka消息kafka-console-producer --broker-list localhost:9092 --topic test# start a listenerkafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning</code></pre><h2 id="LINUX环境下安装kafka"><a href="#LINUX环境下安装kafka" class="headerlink" title="LINUX环境下安装kafka"></a>LINUX环境下安装kafka</h2><p>linux环境下安装kafka和zookeeper版本和mac版本保持一致，kafka为2.2.0,zk的版本为<code>3.4.13</code>，zk对应的<code>tar.gz</code>文件推荐去官网中下载，不要去github中下载，github中的<code>tar.gz</code>文件可能安装不成功。</p><p><a href="http://archive.apache.org/dist/zookeeper/zookeeper-3.4.13/" target="_blank" rel="noopener">zk下载地址</a></p><p><a href="https://github.com/apache/kafka/releases" target="_blank" rel="noopener">kafka下载地址</a></p><p>首先要在linux机器中安装java8以上的jdk环境。</p><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> kafka安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/15/hello-world/"/>
      <url>/2019/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
